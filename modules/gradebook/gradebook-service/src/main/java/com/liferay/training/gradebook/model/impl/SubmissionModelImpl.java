/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.gradebook.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.liferay.training.gradebook.model.Submission;
import com.liferay.training.gradebook.model.SubmissionModel;
import com.liferay.training.gradebook.model.SubmissionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Submission service. Represents a row in the &quot;Gradebook_Submission&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SubmissionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SubmissionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SubmissionImpl
 * @see Submission
 * @see SubmissionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SubmissionModelImpl extends BaseModelImpl<Submission>
	implements SubmissionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a submission model instance should use the {@link Submission} interface instead.
	 */
	public static final String TABLE_NAME = "Gradebook_Submission";
	public static final Object[][] TABLE_COLUMNS = {
			{ "submissionId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "assignmentId", Types.BIGINT },
			{ "studentId", Types.BIGINT },
			{ "submitDate", Types.TIMESTAMP },
			{ "submissionText", Types.VARCHAR },
			{ "comment_", Types.VARCHAR },
			{ "grade", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("submissionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("assignmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("studentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("submitDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("submissionText", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("grade", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table Gradebook_Submission (submissionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,assignmentId LONG,studentId LONG,submitDate DATE null,submissionText VARCHAR(75) null,comment_ STRING null,grade INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Gradebook_Submission";
	public static final String ORDER_BY_JPQL = " ORDER BY submission.submissionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Gradebook_Submission.submissionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.training.gradebook.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.training.gradebook.model.Submission"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.training.gradebook.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.training.gradebook.model.Submission"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.training.gradebook.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.training.gradebook.model.Submission"),
			true);
	public static final long ASSIGNMENTID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long STUDENTID_COLUMN_BITMASK = 4L;
	public static final long SUBMISSIONID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Submission toModel(SubmissionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Submission model = new SubmissionImpl();

		model.setSubmissionId(soapModel.getSubmissionId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAssignmentId(soapModel.getAssignmentId());
		model.setStudentId(soapModel.getStudentId());
		model.setSubmitDate(soapModel.getSubmitDate());
		model.setSubmissionText(soapModel.getSubmissionText());
		model.setComment(soapModel.getComment());
		model.setGrade(soapModel.getGrade());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Submission> toModels(SubmissionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Submission> models = new ArrayList<Submission>(soapModels.length);

		for (SubmissionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.training.gradebook.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.training.gradebook.model.Submission"));

	public SubmissionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _submissionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSubmissionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _submissionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Submission.class;
	}

	@Override
	public String getModelClassName() {
		return Submission.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("submissionId", getSubmissionId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("assignmentId", getAssignmentId());
		attributes.put("studentId", getStudentId());
		attributes.put("submitDate", getSubmitDate());
		attributes.put("submissionText", getSubmissionText());
		attributes.put("comment", getComment());
		attributes.put("grade", getGrade());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long submissionId = (Long)attributes.get("submissionId");

		if (submissionId != null) {
			setSubmissionId(submissionId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long assignmentId = (Long)attributes.get("assignmentId");

		if (assignmentId != null) {
			setAssignmentId(assignmentId);
		}

		Long studentId = (Long)attributes.get("studentId");

		if (studentId != null) {
			setStudentId(studentId);
		}

		Date submitDate = (Date)attributes.get("submitDate");

		if (submitDate != null) {
			setSubmitDate(submitDate);
		}

		String submissionText = (String)attributes.get("submissionText");

		if (submissionText != null) {
			setSubmissionText(submissionText);
		}

		String comment = (String)attributes.get("comment");

		if (comment != null) {
			setComment(comment);
		}

		Integer grade = (Integer)attributes.get("grade");

		if (grade != null) {
			setGrade(grade);
		}
	}

	@JSON
	@Override
	public long getSubmissionId() {
		return _submissionId;
	}

	@Override
	public void setSubmissionId(long submissionId) {
		_submissionId = submissionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getAssignmentId() {
		return _assignmentId;
	}

	@Override
	public void setAssignmentId(long assignmentId) {
		_columnBitmask |= ASSIGNMENTID_COLUMN_BITMASK;

		if (!_setOriginalAssignmentId) {
			_setOriginalAssignmentId = true;

			_originalAssignmentId = _assignmentId;
		}

		_assignmentId = assignmentId;
	}

	public long getOriginalAssignmentId() {
		return _originalAssignmentId;
	}

	@JSON
	@Override
	public long getStudentId() {
		return _studentId;
	}

	@Override
	public void setStudentId(long studentId) {
		_columnBitmask |= STUDENTID_COLUMN_BITMASK;

		if (!_setOriginalStudentId) {
			_setOriginalStudentId = true;

			_originalStudentId = _studentId;
		}

		_studentId = studentId;
	}

	public long getOriginalStudentId() {
		return _originalStudentId;
	}

	@JSON
	@Override
	public Date getSubmitDate() {
		return _submitDate;
	}

	@Override
	public void setSubmitDate(Date submitDate) {
		_submitDate = submitDate;
	}

	@JSON
	@Override
	public String getSubmissionText() {
		if (_submissionText == null) {
			return "";
		}
		else {
			return _submissionText;
		}
	}

	@Override
	public void setSubmissionText(String submissionText) {
		_submissionText = submissionText;
	}

	@JSON
	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		_comment = comment;
	}

	@JSON
	@Override
	public int getGrade() {
		return _grade;
	}

	@Override
	public void setGrade(int grade) {
		_grade = grade;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Submission.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Submission toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Submission)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SubmissionImpl submissionImpl = new SubmissionImpl();

		submissionImpl.setSubmissionId(getSubmissionId());
		submissionImpl.setGroupId(getGroupId());
		submissionImpl.setCompanyId(getCompanyId());
		submissionImpl.setUserId(getUserId());
		submissionImpl.setUserName(getUserName());
		submissionImpl.setCreateDate(getCreateDate());
		submissionImpl.setModifiedDate(getModifiedDate());
		submissionImpl.setAssignmentId(getAssignmentId());
		submissionImpl.setStudentId(getStudentId());
		submissionImpl.setSubmitDate(getSubmitDate());
		submissionImpl.setSubmissionText(getSubmissionText());
		submissionImpl.setComment(getComment());
		submissionImpl.setGrade(getGrade());

		submissionImpl.resetOriginalValues();

		return submissionImpl;
	}

	@Override
	public int compareTo(Submission submission) {
		long primaryKey = submission.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Submission)) {
			return false;
		}

		Submission submission = (Submission)obj;

		long primaryKey = submission.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SubmissionModelImpl submissionModelImpl = this;

		submissionModelImpl._originalGroupId = submissionModelImpl._groupId;

		submissionModelImpl._setOriginalGroupId = false;

		submissionModelImpl._setModifiedDate = false;

		submissionModelImpl._originalAssignmentId = submissionModelImpl._assignmentId;

		submissionModelImpl._setOriginalAssignmentId = false;

		submissionModelImpl._originalStudentId = submissionModelImpl._studentId;

		submissionModelImpl._setOriginalStudentId = false;

		submissionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Submission> toCacheModel() {
		SubmissionCacheModel submissionCacheModel = new SubmissionCacheModel();

		submissionCacheModel.submissionId = getSubmissionId();

		submissionCacheModel.groupId = getGroupId();

		submissionCacheModel.companyId = getCompanyId();

		submissionCacheModel.userId = getUserId();

		submissionCacheModel.userName = getUserName();

		String userName = submissionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			submissionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			submissionCacheModel.createDate = createDate.getTime();
		}
		else {
			submissionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			submissionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			submissionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		submissionCacheModel.assignmentId = getAssignmentId();

		submissionCacheModel.studentId = getStudentId();

		Date submitDate = getSubmitDate();

		if (submitDate != null) {
			submissionCacheModel.submitDate = submitDate.getTime();
		}
		else {
			submissionCacheModel.submitDate = Long.MIN_VALUE;
		}

		submissionCacheModel.submissionText = getSubmissionText();

		String submissionText = submissionCacheModel.submissionText;

		if ((submissionText != null) && (submissionText.length() == 0)) {
			submissionCacheModel.submissionText = null;
		}

		submissionCacheModel.comment = getComment();

		String comment = submissionCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			submissionCacheModel.comment = null;
		}

		submissionCacheModel.grade = getGrade();

		return submissionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{submissionId=");
		sb.append(getSubmissionId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", assignmentId=");
		sb.append(getAssignmentId());
		sb.append(", studentId=");
		sb.append(getStudentId());
		sb.append(", submitDate=");
		sb.append(getSubmitDate());
		sb.append(", submissionText=");
		sb.append(getSubmissionText());
		sb.append(", comment=");
		sb.append(getComment());
		sb.append(", grade=");
		sb.append(getGrade());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.liferay.training.gradebook.model.Submission");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>submissionId</column-name><column-value><![CDATA[");
		sb.append(getSubmissionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assignmentId</column-name><column-value><![CDATA[");
		sb.append(getAssignmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>studentId</column-name><column-value><![CDATA[");
		sb.append(getStudentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submitDate</column-name><column-value><![CDATA[");
		sb.append(getSubmitDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submissionText</column-name><column-value><![CDATA[");
		sb.append(getSubmissionText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comment</column-name><column-value><![CDATA[");
		sb.append(getComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grade</column-name><column-value><![CDATA[");
		sb.append(getGrade());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Submission.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Submission.class
		};
	private long _submissionId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _assignmentId;
	private long _originalAssignmentId;
	private boolean _setOriginalAssignmentId;
	private long _studentId;
	private long _originalStudentId;
	private boolean _setOriginalStudentId;
	private Date _submitDate;
	private String _submissionText;
	private String _comment;
	private int _grade;
	private long _columnBitmask;
	private Submission _escapedModel;
}